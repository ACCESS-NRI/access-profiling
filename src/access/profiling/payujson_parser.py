# Copyright 2025 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

"""Parser for payu JSON walltime data generated by payu.
The data to be parsed is written in the following form:

{
    "scheduler_job_id": "149764665.gadi-pbs",
    "scheduler_type": "pbs",
    # ... many more fields ...
    "timings": {
        "payu_start_time": "2025-09-16T08:52:50.748807",
        "payu_setup_duration_seconds": 47.73822930175811,
        "payu_model_run_duration_seconds": 6776.044810215011,
        "payu_run_duration_seconds": 6779.385873348918,
        "payu_archive_duration_seconds": 8.063649574294686,
        "payu_finish_time": "2025-09-16T10:46:48.974451",
        "payu_total_duration_seconds": 6838.225644
    },
    # ... more fields
}
"""

import json
import os
from pathlib import Path

from access.profiling.metrics import tmax
from access.profiling.parser import ProfilingParser, _read_text_file


class PayuJSONProfilingParser(ProfilingParser):
    """Payu JSON job output profiling parser."""

    _metrics = [tmax]

    def parse(self, file_path: str | Path | os.PathLike) -> dict:
        """Implements "parse" abstract method to parse a JSON file generated by Payu.

        Args:
            file_path (str | Path | os.PathLike): file to parse.

        Returns:
            dict: Parsed timing information.

        Raises:
            ValueError: when input stream is not valid Payu JSON output.
        """

        stream = _read_text_file(file_path)

        errmsg = "No Payu profiling data found"

        try:
            timings = json.loads(stream)["timings"]
        except Exception as e:
            raise ValueError(errmsg) from e

        # remove known keys not relevant to profiling
        for unwanted_key in ("payu_start_time", "payu_finish_time"):
            if unwanted_key in timings:
                del timings[unwanted_key]

        # error if no relevant keys in timings
        if not timings:
            raise ValueError(errmsg)

        result = {"region": [], tmax: []}

        # transpose dict to be consistent with other profiling parsers.
        for k, v in timings.items():
            result["region"].append(k)
            result[tmax].append(v)

        return result
